import { Unit, UnitTypes, UnitBonuses, UnitOptions } from "./Unit";
import { Weapon } from "./gear/Weapon";
import { BasePrayer } from "./BasePrayer";
import { XpDrop, XpDropAggregator } from "./XpDrop";
import { Location } from "./Location";
import { Item } from "./Item";
import { Eating } from "./Eating";
import { PlayerStats } from "./PlayerStats";
import { PlayerRegenTimer } from "./PlayerRegenTimers";
import { Region } from "./Region";
import { Sound } from "./utils/SoundCache";
import { Model } from "./rendering/Model";
import { TileMarker } from "../content/TileMarker";
import { PlayerAnimationIndices } from "./rendering/GLTFAnimationConstants";
declare class PlayerEffects {
    poisoned: number;
    venomed: number;
    stamina: number;
}
export declare class Player extends Unit {
    manualSpellCastSelection: Weapon;
    destinationLocation?: Location;
    pathTargetLocation?: Location;
    stats: PlayerStats;
    currentStats: PlayerStats;
    xpDrops: XpDropAggregator;
    overhead: BasePrayer;
    running: boolean;
    cachedBonuses: UnitBonuses;
    useSpecialAttack: boolean;
    effects: PlayerEffects;
    regenTimer: PlayerRegenTimer;
    autocastDelay: number;
    manualCastHasTarget: boolean;
    eats: Eating;
    inventory: Item[];
    seekingItem: Item;
    path: (Location & {
        run: boolean;
    })[];
    clickMarker: ClickMarker | null;
    aggroMarker: ClickMarker | null;
    pathMarkers: ClickMarker[];
    currentPoseAnimation: PlayerAnimationIndices;
    constructor(region: Region, location: Location, options?: UnitOptions);
    contextActions(region: Region, x: number, y: number): any[];
    setUnitOptions(options: UnitOptions): void;
    interruptCombat(): void;
    get color(): string;
    get height(): number;
    get isPlayer(): boolean;
    get attackRange(): number;
    get attackSpeed(): number;
    openInventorySlots(): number[];
    postAttacksEvent(): void;
    swapItemPositions(pos1: number, pos2: number): void;
    equipmentChanged(): void;
    get bonuses(): UnitBonuses;
    setStats(): void;
    get weight(): number;
    get prayerDrainResistance(): number;
    get type(): UnitTypes;
    clearXpDrops(): void;
    grantXp(xpDrop: XpDrop): void;
    sendXpToController(): void;
    moveTo(x: number, y: number): void;
    attack(): boolean;
    activatePrayers(): void;
    setAggro(mob: Unit): void;
    setSeekingItem(item: Item): void;
    determineDestination(): void;
    private getIdlePoseId;
    clientTick(tickPercent: any): void;
    moveTowardsDestination(): void;
    takeSeekingItem(): void;
    dead(): void;
    private restingAngle;
    private nextAngle;
    private _angle;
    private lastTickPercent;
    getPerceivedRotation(tickPercent: any): number;
    getTargetAngle(): number;
    movementStep(): void;
    removeClickMarker(): void;
    updatePathMarker(): void;
    hitSound(damaged: boolean): Sound | null;
    damageTaken(): void;
    pretick(): void;
    attackStep(): void;
    attackIfPossible(): void;
    draw(tickPercent: number): {
        x: number;
        y: number;
    };
    getPerceivedLocation(tickPercent: number): {
        z: number;
        x: number;
        y: number;
    };
    drawUILayer(tickPercent: number, offset: Location, context: OffscreenCanvasRenderingContext2D, scale: number, hitsplatsAbove: boolean): void;
    create3dModel(): Model;
    get animationIndex(): PlayerAnimationIndices;
    get drawOutline(): boolean;
    get attackAnimationId(): number;
    get canBlendAttackAnimation(): boolean;
    get drawTrueTile(): boolean;
}
declare class ClickMarker extends TileMarker {
    constructor(region: Region, location: Location, color?: string);
    remove(): void;
}
export {};
